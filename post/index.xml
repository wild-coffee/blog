<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wild-coffee</title>
    <link>https://wild-coffee.github.io/blog/post/</link>
    <description>Recent content in Posts on wild-coffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://wild-coffee.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter Android 使用启动 Splash 页面防止启动白屏</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-android-%E4%BD%BF%E7%94%A8%E5%90%AF%E5%8A%A8-splash-%E9%A1%B5%E9%9D%A2%E9%98%B2%E6%AD%A2%E5%90%AF%E5%8A%A8%E7%99%BD%E5%B1%8F/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-android-%E4%BD%BF%E7%94%A8%E5%90%AF%E5%8A%A8-splash-%E9%A1%B5%E9%9D%A2%E9%98%B2%E6%AD%A2%E5%90%AF%E5%8A%A8%E7%99%BD%E5%B1%8F/</guid>
      <description>设置启动背景 android/app/src/main/res/drawable/launch_background.xml
该文件为启动配置界面，取消以下代码注释
同时添加启动界面图片 launch_image 到 mipmap 文件中
&amp;lt;item&amp;gt; &amp;lt;bitmap android:gravity=&amp;#34;center&amp;#34; android:src=&amp;#34;@mipmap/launch_image&amp;#34; /&amp;gt; &amp;lt;/item&amp;gt; 设置启动界面全屏 android/app/src/main/res/values-night/styles.xml android/app/src/main/res/values/styles.xml
修改所有 style 标签，添加以下属性：
windowNoTitle windowFullscreen
&amp;lt;style name=&amp;#34;LaunchTheme&amp;#34;&amp;gt; &amp;lt;!-- Show a splash screen on the activity. Automatically removed when the Flutter engine draws its first frame --&amp;gt; &amp;lt;item name=&amp;#34;android:windowNoTitle&amp;#34;&amp;gt;true&amp;lt;/item&amp;gt; &amp;lt;item name=&amp;#34;android:windowFullscreen&amp;#34;&amp;gt;true&amp;lt;/item&amp;gt; &amp;lt;item name=&amp;#34;android:windowBackground&amp;#34;&amp;gt;@drawable/launch_background&amp;lt;/item&amp;gt; &amp;lt;/style&amp;gt; </description>
    </item>
    
    <item>
      <title>Github 使用 SSH 认证</title>
      <link>https://wild-coffee.github.io/blog/post/github-%E4%BD%BF%E7%94%A8-ssh-%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/github-%E4%BD%BF%E7%94%A8-ssh-%E8%AE%A4%E8%AF%81/</guid>
      <description>从 2021 年 8 月开始，github 对于远程私有仓库不再支持使用 https 的方式访问了
配置 ssh 验证
创建 ssh 密钥 ssh-keygen -t rsa -b 4096 -C &amp;#34;user@mail.com&amp;#34; #创建之前建议检查一下是否已存在 #这里必须使用 github 登陆的邮箱，否则无法认证 #提示设置 rsa 文件存储路径，建议默认（home/.ssh/id_rsa） #会提示输入密码，可选择不输入（输入密码后，则每次 pull、push 都需要输入密码） 在 github 的 setting/ssh key 配置里面添加 key 打开上一步生成的 id_rsa.pub 文件（home/.ssh/），复制里面的内容到添加 key 界面即可</description>
    </item>
    
    <item>
      <title>使用 fat-aar 给 aar 嵌入第三方库</title>
      <link>https://wild-coffee.github.io/blog/post/%E4%BD%BF%E7%94%A8-fataar-%E7%BB%99-aar-%E5%B5%8C%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E4%BD%BF%E7%94%A8-fataar-%E7%BB%99-aar-%E5%B5%8C%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</guid>
      <description>Android aar 库，携带了代码以及资源，但没有包含所引用的第三方库
fat-aar 正式解决这个问题
https://github.com/kezong/fat-aar-android
先在整个项目的 build.gradle(project) 文件中添加该插件，可添加在最顶部位置 buildscript { repositories { mavenCentral() } dependencies { classpath &amp;#39;com.github.kezong:fat-aar:1.3.8&amp;#39; } } 在 aar 项目的 build.gradle(module) 文件中启动该插件 apply plugin: &amp;#39;com.kezong.fat-aar&amp;#39; 查找 aar 所有依赖的第三方 aar 库（嵌套的依赖问题） 在 Android studio 的 gradle 配置窗口，执行 aar/Task/Android/androidDependencies 任务 在 output 窗口即可知道所有依赖的第三方 aar 库
嵌入第三方库 修改 aar 的 build.gradle(module) 配置中 dependencies 项
将需要嵌入的第三方库的引用方式由 implementation 修改为 embed
embed (&amp;#39;com.google.protobuf:protobuf-java:3.21.5&amp;#39;) 打包 aar 检查 打包 aar 后，并解压该文件，在解压目录 libs 中可看到嵌入的第三方库的 aar 文件即成功</description>
    </item>
    
    <item>
      <title>Android 集成百度离线人脸识别</title>
      <link>https://wild-coffee.github.io/blog/post/android-%E9%9B%86%E6%88%90%E7%99%BE%E5%BA%A6%E7%A6%BB%E7%BA%BF%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/android-%E9%9B%86%E6%88%90%E7%99%BE%E5%BA%A6%E7%A6%BB%E7%BA%BF%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</guid>
      <description>百度离线人脸识别，支持人脸采集、特诊提取、本地人脸库管理，同时支持离线激活、在线激活及批量激活，适合在无联网场景使用
文档地址：https://ai.baidu.com/ai-doc/FACE/Yk37c1opz
当前版本：8.0
通过百度平台账户登录后，下载 Android-SDK(Baidu_Face_Offline_SDK_Android_8.0) 文件
新建 Android 工程，添加 Module(FaceSDKAndroid\facelibrary)
按理本文到此也该结束，但百度的 SDK 集成，着实踩了相当多的坑！
在通过 File -&amp;gt; New -&amp;gt; Import Module 时，报：Could not find method compile() for arguments [directory &amp;rsquo;libs&#39;] 因为 gradle 已经作废了 compile，用 api 替换;
修改 facelibrary\build.gradle 中 dependencies
修改前
compile fileTree(include: [&amp;#39;*.jar&amp;#39;], dir: &amp;#39;libs&amp;#39;) compile files(&amp;#39;libs/orbbec_module-debug.aar&amp;#39;) 修改后
api fileTree(include: [&amp;#39;*.jar&amp;#39;], dir: &amp;#39;libs&amp;#39;) compileOnly files(&amp;#39;libs/orbbec_module-debug.aar&amp;#39;) 能调试，但编译时报：Direct local .aar file dependencies are not supported when building an AAR. 因为在新版的 Android studio 中，对 aar 包的引用方式有变化，这里不作探讨，解决方法参考上一条</description>
    </item>
    
    <item>
      <title>Flutter 插件之 Webview_flutter - 浏览器</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-webview_flutter-%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-webview_flutter-%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>A Flutter plugin that provides a WebView widget.
On iOS the WebView widget is backed by a WKWebView; On Android the WebView widget is backed by a WebView.
WebView 是一个浏览器控件，支持 Android 和 iOS
插件地址：https://pub.flutter-io.cn/packages/webview_flutter
仓库地址：https://github.com/flutter/plugins/tree/main/packages/webview_flutter/webview_flutter
API （3.0.4）介绍：
WebView
const WebView({ Key? key, this.onWebViewCreated, this.initialUrl, this.initialCookies = const &amp;lt;WebViewCookie&amp;gt;[], this.javascriptMode = JavascriptMode.disabled, this.javascriptChannels, this.navigationDelegate, this.gestureRecognizers, this.onPageStarted, this.onPageFinished, this.onProgress, this.onWebResourceError, this.debuggingEnabled = false, this.gestureNavigationEnabled = false, this.userAgent, this.zoomEnabled = true, this.initialMediaPlaybackPolicy = AutoMediaPlaybackPolicy.</description>
    </item>
    
    <item>
      <title>Anaconda 安装与使用</title>
      <link>https://wild-coffee.github.io/blog/post/anaconda-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/anaconda-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>Anaconda 官网介绍为 The World&amp;rsquo;s Most Popular Data Science Platform，一个数据科学计算平台，但对我来说她是一个 Python 包管理器和环境管理器。
假设电脑上需要运行多种 Python 环境，每个环境的 Python 版本不一样，所依赖的包的版本可能也不一样，安装多个版本的 Python 会导致管理的混乱，尤其是删除时，十分的麻烦。
Anaconda 可以完美地解决这个问题。
她通过创建多个虚拟环境，来隔离各个运行环境，每个虚拟空间拥有自己的 Python 版本及依赖包，结合空间创建、切换、删除等命令，方便地进行运行环境搭建。
Anaconda 安装、配置、升级和卸载 Anaconda 官网地址：https://www.anaconda.com/
阿里云下载地址：https://mirrors.aliyun.com/anaconda/
清华源下载地址：https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/
下载对应版本 .sh 文件，通过 bash 命令运行安装： bash Anaconda3-5.3.1-Linux-x86_64.sh
安装完成后运行：conda --version，验证是否成功
conda 安装后，启动命令行，默认就会进入 base 环境，可通过以下方式开关该特性
conda config --set auto_activate_base false
配置镜像源 设置 conda 阿里云镜像（ubuntu）
修改 home 目录下的 .condarc 文件
show_channel_urls: true channels: - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 设置 conda 清华镜像源</description>
    </item>
    
    <item>
      <title>Dio 无法用 Fiddler 抓包问题</title>
      <link>https://wild-coffee.github.io/blog/post/dio-%E6%97%A0%E6%B3%95%E7%94%A8-fiddler-%E6%8A%93%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/dio-%E6%97%A0%E6%B3%95%E7%94%A8-fiddler-%E6%8A%93%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description> Dio 默认内部使用 HttpClient 进行网络请求，默认不会使用系统配置的代理，而 Fiddler 通过配置系统代理抓包分析，所以 Fiddler 无法抓到 Dio 的网络请求包。
通过在 onHttpClientCreate 中配置 findProxy 来配置 Dio 使用代理来访问网络。
同时，通过配置 badCertificateCallback 忽略 HTTPS 证书问题。
(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client) { client.findProxy = (url) { return HttpClient.findProxyFromEnvironment(url, environment: { &amp;#34;http_proxy&amp;#34;: &amp;#34;127.0.0.1:8888&amp;#34;, &amp;#34;https_proxy&amp;#34;: &amp;#34;127.0.0.1:8888&amp;#34; }); }; client.badCertificateCallback = (X509Certificate cert, String host, int port) { return true; }; return client; }; </description>
    </item>
    
    <item>
      <title>预览所有 MaterialApp Icon</title>
      <link>https://wild-coffee.github.io/blog/post/%E9%A2%84%E8%A7%88%E6%89%80%E6%9C%89-materialapp-icon/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E9%A2%84%E8%A7%88%E6%89%80%E6%9C%89-materialapp-icon/</guid>
      <description> Flutter 采用 MaterialApp 风格时，内置了很多图标，且这些图标访问使用类静态成员直接访问（Icons.perm_identity），使用十分方便
但是，由于使用 visual studio code 开发时，没有预览所有图标的功能，查找图标十分麻烦，可在下面地址中预览图标：
官方预览地址 https://fonts.google.com/icons?selected=Material+Icons
https://material.io/tools/icons/?style=baseline
https://materialdesignicons.com/
其它地址 https://www.cnblogs.com/ckAng/p/10751545.html </description>
    </item>
    
    <item>
      <title>Flutter 修改应用程序名字和图标</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-%E4%BF%AE%E6%94%B9%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%8D%E5%AD%97%E5%92%8C%E5%9B%BE%E6%A0%87/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-%E4%BF%AE%E6%94%B9%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%8D%E5%AD%97%E5%92%8C%E5%9B%BE%E6%A0%87/</guid>
      <description>应用程序名字和图标，即安装后在手机桌面上显示的图标和名字。在 flutter 中，修改名字和图标并不是一个地方统一修改，而是各平台单独修改
Android 名字：修改 android/app/src/main/AndroidManifest.xml，manifest &amp;gt; application &amp;gt; android:label
图标：修改 android/app/src/main/AndroidManifest.xml，manifest &amp;gt; application &amp;gt; android:icon
需提前添加图片到 android/app/src/main/res/mipmap-*dpi
iOS 名字：修改 ios/Runner/Info.plist，CFBundleName
图标：修改 ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
需提前添加图片到 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-x@*x.png
实际开发中，更习惯于直接把 Android/iOS 中的文件直接替换，简单又直接！</description>
    </item>
    
    <item>
      <title>Flutter 安装及环境配置</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>Flutter 是 Google 开源的应用开发框架，仅通过一套代码库，就能构建精美的、原生平台编译的多平台应用。官方网站：https://flutter.cn/
安装及环境变量配置 最新的安装方法以开发文档为准：https://flutter.cn/docs/get-started/install/windows
下载最新的 SDK ：https://flutter.cn/docs/get-started/install，下载后，把解压得到的 flutter 目录复制到用户目录（C:\Users\Alan\flutter）
配置环境 Path 指定 SDK 路径
在用户环境变量 Path 中添加：%USERPROFILE%\flutter\bin，添加完成后命令行执行：where flutter dart，可工作即可
在用户环境变量中添加以下以下 2 个变量，以解决国内 flutter 升级、包更新等太慢的问题
PUB_HOSTED_URL=https://pub.flutter-io.cn FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn Flutter doctor 检查，安装 Android studio 及 Android SDK 在 Flutter 安装完成后，启动命令行执行：flutter doctor 检查，全部为绿色则表示 flutter 安装成功
错误 1：Android toolchain - develop for Android devices.
则需要安装 Android studio，下载地址：https://developer.android.google.cn/studio?hl=zh-cn
错误 2：cmdline-tools component is missing
则需要在 Android studio 中安装：SDK Manager-&amp;gt;SDK Tools-&amp;gt;Android SDK Command-line Tools(latest)
安装完成后执行：flutter doctor --android-licenses</description>
    </item>
    
    <item>
      <title>Flutter 插件之 Flutter_tts - 合成声音</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-flutter_tts-%E5%90%88%E6%88%90%E5%A3%B0%E9%9F%B3/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-flutter_tts-%E5%90%88%E6%88%90%E5%A3%B0%E9%9F%B3/</guid>
      <description> flutter_tts 是一个将文字转换为合成声音的插件，支持多语言及播放控制等
插件地址：https://pub.flutter-io.cn/packages/flutter_tts
API （version 3.3.3）介绍：
FlutterTts() # 构造 Future&amp;lt;dynamic&amp;gt; isLanguageAvailable(String language) async # 是否支持某种语言 Future&amp;lt;dynamic&amp;gt; get getLanguages async # 支持的语言列表 Future&amp;lt;dynamic&amp;gt; setLanguage(String language) async # 设置合成语言 Future&amp;lt;dynamic&amp;gt; setSpeechRate(double rate) async # 速率 Future&amp;lt;dynamic&amp;gt; setVolume(double volume) async # 音量 Future&amp;lt;dynamic&amp;gt; setPitch(double pitch) async # 音调 Future&amp;lt;dynamic&amp;gt; awaitSpeakCompletion(bool awaitCompletion) async # 等待声音播放完成 Future&amp;lt;dynamic&amp;gt; speak(String text) async # 播放声音 Future&amp;lt;dynamic&amp;gt; pause() async # 暂停（iOS|Web） Future&amp;lt;dynamic&amp;gt; stop() async # 停止 </description>
    </item>
    
    <item>
      <title>Flutter 插件之 Path_provider - 获取常用目录位置</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-path_provider-%E8%8E%B7%E5%8F%96%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-path_provider-%E8%8E%B7%E5%8F%96%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE/</guid>
      <description> path_provider 提供了一种平台透明的方式，来访问设备文件系统上的常用位置的插件，全平台支持的位置包含临时目录和软件数据目录等
插件地址：https://pub.flutter-io.cn/packages/path_provider
API （version 2.0.9）介绍：
# 获取应用程序数据目录 # Android - getDataDirectory # iOS - NSDocumentDirectory Future&amp;lt;Directory&amp;gt; getApplicationDocumentsDirectory() async # 获取临时目录 # Android - getCacheDir # iOS - NSCachesDirectory Future&amp;lt;Directory&amp;gt; getTemporaryDirectory() async </description>
    </item>
    
    <item>
      <title>Flutter 插件之 Pigeon - 与宿主平台通信</title>
      <link>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-pigeon-%E4%B8%8E%E5%AE%BF%E4%B8%BB%E5%B9%B3%E5%8F%B0%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/flutter-%E6%8F%92%E4%BB%B6%E4%B9%8B-pigeon-%E4%B8%8E%E5%AE%BF%E4%B8%BB%E5%B9%B3%E5%8F%B0%E9%80%9A%E4%BF%A1/</guid>
      <description>Pigeon is a code generator tool to make communication between Flutter and the host platform type-safe, easier and faster.
Pigeon 是一个代码生成工具，让 Flutter 与宿主平台更简单、更快捷且类型安全地通信。非常类似于：Protocol Buffer
Pigeon 支持在 iOS 平台生成 Object-C 代码，在 Android 平台生成 Java 代码
插件地址：https://pub.flutter-io.cn/packages/pigeon
仓库地址：https://github.com/flutter/packages/tree/master/packages/pigeon/pigeons
示例地址：https://github.com/gaaclarke/pigeon_plugin_example
API （1.0.18）介绍：
创建插件工程，并安装 Pigeon flutter create --template=plugin --platforms=android,ios -i swift -a kotlin day08_pigeon 通过 plugin 模板创建的项目中：
1.有一个 example 文件夹，里面可以添加插件使用示例代码，方便测试插件
2.在 pubspec.yaml 文件中，指定了各个平台真实实现的类名信息
flutter: plugin: platforms: android: package: com.example.day08_pigeon pluginClass: Day08PigeonPlugin ios: pluginClass: Day08PigeonPlugin 因为 Pigeon 是一个代码生成工具，并不需要运行时支持，所以只需要在 dev_dependencies 中添加</description>
    </item>
    
    <item>
      <title>使用 FVM 管理多个版本的 Flutter</title>
      <link>https://wild-coffee.github.io/blog/post/%E4%BD%BF%E7%94%A8-fvm-%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84-flutter/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E4%BD%BF%E7%94%A8-fvm-%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84-flutter/</guid>
      <description>Flutter version manager (FVM)，是一个在本机管理多个 flutter 版本的 CLI 工具，官方地址为：https://fvm.app/
在开发工具 Visual studio code 中配置：https://fvm.app/docs/getting_started/configuration#vs-code
在源代码管理 GIT 中配置：https://fvm.app/docs/getting_started/configuration#project
安装 choco 用管理员身份运行 cmd | Powershell
@powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;#34;iex ((new-object net.webclient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))&amp;#34; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin 安装完成后，执行以下命令，检查安装及升级
choco -v choco upgrade chocolatey 安装 FVM choco install fvm fvm --version 使用 FVM 安装多个版本的 Flutter fvm releases # 查看可用的 flutter 版本 fvm list # 查看已安装的版本 fvm config # 查看 fvm 配置，包括缓存 flutter 仓库路径 fvm config --cache-path &amp;lt;CACHE_PATH&amp;gt; # 设置缓存 flutter 仓库路径 fvm install 2.</description>
    </item>
    
    <item>
      <title>使用 UglifyJS 对 Javascript 文件进行压缩</title>
      <link>https://wild-coffee.github.io/blog/post/%E4%BD%BF%E7%94%A8-uglifyjs-%E5%AF%B9-javascript-%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E4%BD%BF%E7%94%A8-uglifyjs-%E5%AF%B9-javascript-%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%8E%8B%E7%BC%A9/</guid>
      <description>安装 npm install uglify-js -g # 全局安装 npm install uglify-js@3.6.7 -g # 可以安装指定版本的包 uglifyjs -V # 检查是否安装成功 ES 问题 如果项目中用到了 ES 6.0 语法，uglify-js 会报错；这时需要安装 uglify-es 替换掉 uglify-js，安装方式同 uglify-js
eg.错误： Unexpected token: name «slnCache», expected: punc «;»
npm install uglify-es -g uglifyjs -V # 将显示：uglify-es 3.3.9 配置使用 MSDeploy 方式发布网站时，不更新 web.config 文件 Publish 文件: Publish.pubxml 中，在标签 中增加以下
&amp;lt;ExcludeFilesFromDeployment&amp;gt;Web.config&amp;lt;/ExcludeFilesFromDeployment&amp;gt; 配置 Visual Studio 在 Publish 网站时自动压缩。 该方法仅仅适用于：MSDeploy 方式发布网站，不支持 File System
Publish文件: Publish.pubxml 中，在标签 &amp;lt;PropertyGroup&amp;gt; 中增加以下</description>
    </item>
    
    <item>
      <title>快捷键与命令</title>
      <link>https://wild-coffee.github.io/blog/post/%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8E%E5%91%BD%E4%BB%A4/</guid>
      <description>Visual studio 2019 调试模式下，快速回到当前代码行：Alt + * 查看定义：F12 查看所有引用：Shift + F12 查看所有实现：Ctrl + F12 退回：Ctrl + -（P 键上方的减键） 前进：Ctrl + Shift + -（P 键上方的减） 列选中模式：Alt + Shift + Up/Down 复制当前行并粘贴到下一行：Ctrl + D 剪切当前行：Shift + Delete 连续选中：Shift + Left/Right 连续快速选中：Ctrl + Shift + Left/Right 快速左右移动光标：Ctrl + Left/Right 行内容交换：Alt + Up/Down Visual studio code 查看定义：F12 查看所有引用：Shift + F12 查看所有实现：Ctrl + F12 退回：Alt + Left 前进：Alt + Right 列选中模式：Alt + Shift + 鼠标左键选择范围 行内容交换：Alt + Up/Down 复制当前行并粘贴到下一行：Alt + Shift + Up/Down 命令：Ctrl + Shift + P 剪切当前行：Shift + Delete Ubuntu 打开终端：ctrl + alt + T 终端全屏：F11 新建当前同路径的终端（新窗口）：ctrl + shift + N 再开一个当前同路径终端（新标签）：ctrl + shift + T 打开所有软件：supper + A Windows Adb 设置横竖屏</description>
    </item>
    
    <item>
      <title>GIT 常用命令</title>
      <link>https://wild-coffee.github.io/blog/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TFS 常用运维</title>
      <link>https://wild-coffee.github.io/blog/post/tfs-%E5%B8%B8%E7%94%A8%E8%BF%90%E7%BB%B4/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/tfs-%E5%B8%B8%E7%94%A8%E8%BF%90%E7%BB%B4/</guid>
      <description>常见问题 Visual studio 里面多了一些名称格式为 D + GUID 的工程
用 TF 工具删除(TF工具位置：C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE)
执行：tf destroy $/&amp;lt;GUID，不能带最前面的D&amp;gt; /collection:https://dev.azure.com/&amp;lt;URL&amp;gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 系统安装与常用配置</title>
      <link>https://wild-coffee.github.io/blog/post/ubuntu-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/ubuntu-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>安装 在 bios 中先启用 UEFI（disabled CMS ）
分区，以 1TB 磁盘为例
EFI 分区，如果不显示，则需要在 BIOS 中启用 UEFI，建议 4GB，Logical, Beginning of this space
SWAP 分区，建议大小为内存的 2 倍，Primary, Beginning of this space
挂载点 / ，存放 ubuntu 系统文件，建议 128GB，Logical, Beginning of this space
挂载点 /urs，存放用户自定义程序，建议 128GB，Logical, Beginning of this space
挂载点 /home，用户目录，余下所有空间，Logical, Beginning of this space
基础配置 在软件设置里把 SourceList 源设置为 aliyun，启动 Software&amp;amp;Updates 进行更新升级
安装拼音输入法
sudo apt-get install fcitx-googlepinyin
打开 Language Support 程序，设置 Keyboard input method system: &amp;ldquo;fcitx&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Windows 系统常用运维</title>
      <link>https://wild-coffee.github.io/blog/post/windows-%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E8%BF%90%E7%BB%B4/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/windows-%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E8%BF%90%E7%BB%B4/</guid>
      <description>Windows查看某进程占用端口情况，或查看某端口被哪个进程占用 netstat -ano|findstr &amp;#34;:8080&amp;#34; # 通过端口号，找到占用进程 ID，假设端口号为 8080 tasklist -V|findstr &amp;#34;10296&amp;#34; # 找到进程 PID 后，找到对应的 exe 文件，假设 PID 为 10296 taskkill /PID 10296 -T -F # 杀死该进程，-F 强制，-S 同时杀死子进程 Windows 10 看发行的版本 开始 -&amp;gt; 设置(齿轮图标) -&amp;gt; 系统 -&amp;gt; 关于</description>
    </item>
    
    <item>
      <title>安装 Windows 7 X64 系统相关注意事项</title>
      <link>https://wild-coffee.github.io/blog/post/%E5%AE%89%E8%A3%85-windows-7-x64-%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E5%AE%89%E8%A3%85-windows-7-x64-%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>BIOS 设置 打开 Launch CSM
关闭 Secure BOOT
U盘工具制作 UltraISO 软件
格式化为 FAT32 USB-HDD+ 模式 菜单 -&amp;gt; 启动 -&amp;gt; 写入硬盘映像 Window 7 64 位 ISO 文件
下载地址为 https://msdn.itellyou.cn/
给制作的启动 U 盘文件添加 BootX64.efi 特殊文件
BootX64.efi 来源：安装了 Win8/10系统的 C:\Windows\Boot\EFI\bootmgfw.efi 在制作的启动 U 盘的 EFI 根目录下面，新建 Boot 文件夹，把 bootmgfw.efi 复制到该文件夹，并重命名为：BootX64.efi 常见问题汇总 Invalid signature detected
BIOS 设置中 Secure BOOT 未关闭
一直停留在 Windows 正在启动界面
BIOS 设置中 Launch CSM 未打开
BIOS 启动选项中没有 U 盘启动的选项
U盘工具制作中，未给启动 U 盘添加特殊文件</description>
    </item>
    
    <item>
      <title>我的 Visual Studio 2013 开发环境配置</title>
      <link>https://wild-coffee.github.io/blog/post/%E6%88%91%E7%9A%84-visual-studio-2013-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wild-coffee.github.io/blog/post/%E6%88%91%E7%9A%84-visual-studio-2013-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>Tab 设置 Tools -&amp;gt; Options -&amp;gt; Text Editor -&amp;gt; C# -&amp;gt; Tabs
选择：Smart 选择：Keep tabs Tab size 输入：4 Indent size 输入：4 黑色主题 Tools -&amp;gt; Options -&amp;gt; Environment -&amp;gt; General -&amp;gt; Color theme
行号显示 Tools -&amp;gt; Options -&amp;gt; Text Editor -&amp;gt; All Language：Line numbers
智能空格设置 Tools -&amp;gt; Options -&amp;gt; Text Editor -&amp;gt; C# -&amp;gt; Formatting -&amp;gt; Spacing
关闭：Insert space after keywords in control flow statements（if 后面的空格）
安装常用的插件 Productivity Power Tools 2013（安装） NuGet Package Manager for Visual Studio 2013（升级） 环境和文本编辑器配置字体（等宽） 工具 -&amp;gt; 选项 -&amp;gt; 环境 -&amp;gt; 字体和颜色</description>
    </item>
    
  </channel>
</rss>
